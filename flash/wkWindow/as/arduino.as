import net.eriksjodin.arduino.Arduino;import net.eriksjodin.arduino.ArduinoWithServo;import net.eriksjodin.arduino.events.ArduinoEvent;import net.eriksjodin.arduino.events.ArduinoSysExEvent;// == VARIABLES =========================================================================// store a digitalValue for edge/state change detection. var lastDigitalValue:Boolean;// make a timer object that calls the timerEvent function 20 times a second (every 50ms)var refreshTimer = new Timer(50);refreshTimer.addEventListener(TimerEvent.TIMER, onTick);// Change this array to the pin configuration you use in your own setup.var defaultPinConfig:Array = new Array(	null,		// Pin 0   null (is RX)	null,		// Pin 1   null (is TX)	'digitalIn',  // Pin 2   digitalIn or digitalOut 	'digitalIn',  // Pin 3   pwmOut or digitalIn or digitalOut 	'digitalIn',  // Pin 4   digitalIn or digitalOut  	'digitalIn',  // Pin 5   pwmOut or digitalIn or digitalOut 	'digitalIn',  // Pin 6   pwmOut or digitalIn or digitalOut 	'digitalIn',  // Pin 7   digitalIn or digitalOut  	'digitalIn',  // Pin 8   digitalIn or digitalOut  	'digitalIn',  // Pin 9   pwmOut or digitalIn or digitalOut or servo 	'digitalIn',  // Pin 10  pwmOut or digitalIn or digitalOut or servo	'digitalIn',  // Pin 11  pwmOut or digitalIn or digitalOut 	'digitalIn',  // Pin 12  digitalIn or digitalOut 	'digitalOut', // Pin 13  digitalIn or digitalOut ( led connected )	'analogIn',   // Analog pin 0  analogIn	'analogIn',   // Analog pin 1  analogIn	'analogIn',   // Analog pin 2  analogIn	'analogIn',   // Analog pin 3  analogIn	'analogIn',   // Analog pin 4  analogIn	'analogIn'    // Analog pin 5  analogIn);// Arduino objectvar a:ArduinoWithServo;// connect to a serial proxy on port 5331a = new ArduinoWithServo("127.0.0.1", 5331);// listen for connection a.addEventListener(Event.CONNECT,onSocketConnect); a.addEventListener(IOErrorEvent.IO_ERROR,errorHandler);			// listen for firmware (sent on startup)a.addEventListener(ArduinoEvent.FIRMWARE_VERSION, onReceiveFirmwareVersion);// == SETUP AND INITIALIZE CONNECTION ( don't modify ) ==================================// triggered when there is an IO Errorfunction errorHandler(errorEvent:IOErrorEvent):void {   trace("- "+errorEvent.text);    trace("- Did you start the Serproxy program ?");}// triggered when a serial socket connection has been establishedfunction onSocketConnect(e:Object):void {	trace("- Connection with Serproxy established. Wait one moment.");		// request the firmware version	a.requestFirmwareVersion();	}function onReceiveFirmwareVersion(e:ArduinoEvent):void {   trace("- Connection with Arduino - Firmata version: " + String(e.value)); 			trace("- Set default pin configuration.");	// set Pinmodes by the default array. 	for(var i:int = 2; i<defaultPinConfig.length; i++)	{ // set digital output pins	  if(defaultPinConfig[i] == "digitalOut") a.setPinMode(i, Arduino.OUTPUT);  	  // set digital input pins	  if(defaultPinConfig[i] == "digitalIn")  a.setPinMode(i, Arduino.INPUT);      // set pwm output pins	  if(defaultPinConfig[i] ==  "pwmOut")    a.setPinMode(i, Arduino.PWM);	  // set servo output pins	  if(defaultPinConfig[i] ==  "servo")    	  { a.setupServo(i, 0);	    // write set start position to 0 otherwise it turns directly to 90 degrees.	    a.writeAnalogPin(i, 0);	  }	}			// you have to turn on reporting for every ANALOG pin individualy. 	for(var j:int = 0; j<6; j++)	{ a.setAnalogPinReporting(j, Arduino.ON);		}		// for digital pins its only one setting	a.enableDigitalPinReporting();			startProgram();	}